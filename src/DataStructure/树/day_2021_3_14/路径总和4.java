package DataStructure.树.day_2021_3_14;

/**
 * @program: leetcode
 * @description:
 * @author: 饶嘉伟
 * @create: 2021-03-14 20:06
 **/

//1. 题目
//        对于一棵深度小于 5 的树，可以用一组三位十进制整数来表示。
//        对于每个整数：
//        百位上的数字表示这个节点的深度 D，1 <= D <= 4。
//        十位上的数字表示这个节点在当前层所在的位置 P， 1 <= P <= 8。位置编号与一棵满二叉树的位置编号相同。
//        个位上的数字表示这个节点的权值 V，0 <= V <= 9。
//        给定一个包含三位整数的升序数组，表示一棵深度小于 5 的二叉树，
//        请你返回从根到所有叶子结点的路径之和。
//样例 1:
//        输入: [113, 215, 221]
//        输出: 12
//        解释:
//        这棵树形状如下:
//          3
//         / \
//        5   1
//        路径和 = (3 + 5) + (3 + 1) = 12.
//        样例 2:
//        输入: [113, 221]
//        输出: 4
//        解释:
//        这棵树形状如下:
//        3
//         \
//          1
//        路径和 = (3 + 1) = 4.

/*
 * 思路：
 *   题目并没有直接给我们一颗二叉树，但是可以自己构建一颗
 *   首先考虑如何通过这种形式的表达方式获得左右子节点
 *   可以将数字分割成 id 与value 的形式
 *   id就是表示节点位置的部分，value则是节点值
 *   例如
 *       3  113
 *       / \
 *  215 5  1  221
 *
 *  将id分成两部分，十位代表层数，个位代表所在层位置
 *
 *  通过观察不难发现，
 *   ten = id /10;
 *   one = id % 10;
 *   左子节点层数等于父节点层数加1，
 *   leftTen = ten +1;
 *   左子节点位置：
 *  leftOne = (one-1)*2+1
 *
 *
 * */
public class 路径总和4 {

}
